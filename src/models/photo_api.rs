use chrono::NaiveDateTime;
use rocket::serde::Serialize;
use crate::models::photo::Photo;

/// The version of the Photo struct that is returned by the API with certain fields removed
/// (currently, thumbnail_path)
///
/// # Fields
/// - `id` (`i64`): Unique identifier for the photo generated by the database. Serialized as "photoId" in JSON
/// - `hash` (`String`): xxh3-128 hash value of the photo, used to ensure uniqueness
/// - `file_name` (`String`): Original filename of the photo
/// - `file_path` (`String`): Path where the photo is stored on disk
/// - `size_on_disk` (`i32`): Size of the photo on disk in KB
/// - `photo_date` (`NaiveDateTime`): When the photo was taken
/// - `photo_timezone` (`String`): Timezone info for the photo timestamp
/// - `resolution` (`Vec<Option<i16>>`): Photo dimensions [width, height]
/// - `mime_type` (`String`): Media type of the photo (e.g. "image/x-sony-arw")
/// - `camera_model` (`String`): Make and model of the camera used
/// - `lens_model` (`String`): Make and model of the lens used
/// - `shutter_count` (`i32`): Camera's actuation count when photo was taken
/// - `focal_length` (`i16`): Focal length used in millimeters
/// - `iso` (`i32`): ISO sensitivity value
/// - `shutter_speed` (`String`): Exposure time as a string (e.g. "1/250")
/// - `aperture` (`f32`): F-stop value used
#[derive(Serialize, Debug)]
#[serde(rename_all = "camelCase")]
pub struct ApiReturnPhoto {
    #[serde(rename = "photoId")]
    pub id: i64,
    pub hash: String,
    pub file_name: String,
    pub file_path: String,
    pub size_on_disk: i32,
    pub photo_date: NaiveDateTime,
    pub photo_timezone: String,
    pub resolution: Vec<Option<i16>>,
    pub mime_type: String,
    pub camera_model: String,
    pub lens_model: String,
    pub shutter_count: i32,
    pub focal_length: i16,
    pub iso: i32,
    pub shutter_speed: String,
    pub aperture: f32,
}


impl From<Photo> for ApiReturnPhoto {
    fn from(value: Photo) -> Self {
        ApiReturnPhoto {
            id: value.id,
            hash: value.hash,
            file_name: value.file_name,
            file_path: value.file_path,
            size_on_disk: value.size_on_disk,
            photo_date: value.photo_date,
            photo_timezone: value.photo_timezone,
            resolution: value.resolution,
            mime_type: value.mime_type,
            camera_model: value.camera_model,
            lens_model: value.lens_model,
            shutter_count: value.shutter_count,
            focal_length: value.focal_length,
            iso: value.iso,
            shutter_speed: value.shutter_speed,
            aperture: value.aperture,
        }
    }
}