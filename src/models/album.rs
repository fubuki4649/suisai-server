use crate::db::schema::{album_photos, albums};
use diesel::prelude::*;
use rocket::serde::{Deserialize, Serialize};


/// Represents an album with a unique identifier, name, and associated photos.
///
/// # Fields
/// * `id`: Album's unique ID, serialized as `albumId` in JSON
/// * `album_name`: Album name
///
/// # Example
/// ```
/// let album = Album {
///     id: 1, 
///     album_name: "Vacation".into(),
/// };
/// ```
#[derive(Queryable, Selectable, AsChangeset, Serialize, Deserialize, Debug)]
#[serde(rename_all = "camelCase")]
pub struct Album {
    #[serde(rename = "albumId")]
    pub id: i32,
    pub album_name: String
}

/// A variant of `Album` without photos or ID, used for creating new album instances.
///
/// This struct only contains the album name since IDs are auto-generated by the database
/// and photos are associated separately. It's primarily used when creating new albums
/// or updating album metadata.
///
/// # Fields
/// * `album_name`: The name for the new album
///
/// # Example
/// ```
/// let new_album = NewAlbum {
///     album_name: "Vacation Photos".into()
/// };
/// ```
#[derive(Insertable, Deserialize, Debug)]
#[serde(rename_all = "camelCase")]
#[diesel(table_name = albums)]
pub struct NewAlbum {
    pub album_name: String,
}

/// The `AlbumPhoto` struct corresponds to the `album_photos` table, a join table between
/// `Album` and `Photo` in the database.
///
/// It exists exclusively for internal use within `crate::db::operations`
#[derive(Queryable, Selectable, Insertable, AsChangeset, Debug)]
#[diesel(table_name = album_photos)]
pub(crate) struct AlbumPhoto {
    pub album_id: i32,
    pub photo_id: i64,
}
