use crate::db::schema::photos;
use chrono::NaiveDateTime;
use diesel::prelude::*;
use rocket::serde::{Deserialize, Serialize};

/// Represents a photo entity with associated metadata stored in the database.
///
/// The struct implements serialization for JSON responses and can be queried/updated using Diesel ORM.
///
/// # Fields
/// * `id` (`i64`): Unique identifier for the photo generated by the database. Serialized as "photoId" in JSON
/// * `thumbnail_url` (`String`): URL path to the photo's thumbnail image 
/// * `hash` (`String`): xxh3-128 hash value of the photo, used to ensure uniqueness
/// * `file_name` (`String`): Original filename of the photo
/// * `file_path` (`String`): Path where the photo is stored on disk
/// * `size_on_disk` (`i32`): Size of the photo on disk in KB
/// * `photo_date` (`NaiveDateTime`): When the photo was taken
/// * `photo_timezone` (`String`): Timezone info for the photo timestamp
/// * `resolution` (`Vec<Option<i16>>`): Photo dimensions [width, height]
/// * `mime_type` (`String`): Media type of the photo (e.g. "image/x-sony-arw")
/// * `camera_model` (`String`): Make and model of the camera used
/// * `lens_model` (`String`): Make and model of the lens used
/// * `shutter_count` (`i32`): Camera's actuation count when photo was taken
/// * `focal_length` (`i16`): Focal length used in millimeters
/// * `iso` (`i32`): ISO sensitivity value 
/// * `shutter_speed` (`String`): Exposure time as a string (e.g. "1/250")
/// * `aperture` (`f32`): F-stop value used
#[derive(Queryable, Selectable, AsChangeset, Serialize, Debug)]
#[diesel(table_name = photos)]
#[serde(rename_all = "camelCase")]
pub struct Photo {
    #[serde(rename = "photoId")]
    pub id: i64,
    pub hash: String,
    pub thumbnail_path: String,
    pub file_name: String,
    pub file_path: String,
    pub size_on_disk: i32,
    pub photo_date: NaiveDateTime,
    pub photo_timezone: String,
    pub resolution: Vec<Option<i16>>,
    pub mime_type: String,
    pub camera_model: String,
    pub lens_model: String,
    pub shutter_count: i32,
    pub focal_length: i16,
    pub iso: i32,
    pub shutter_speed: String,
    pub aperture: f32,
}


/// Similar to `Photo` struct but without an `id` field, as it is used for creating new photos in the database.
/// The database auto-generates the `id` field when inserting a new record.
///
/// This struct contains all the metadata fields needed for a new photo entry:
///
/// # Fields
/// - `thumbnail_url` (`String`): URL of the photo's thumbnail
/// - `hash` (`String`): xxh3-128 hash value of the photo
/// - `file_name` (`String`): File name including extension
/// - `file_path` (`String`): Full path to storage location
/// - `size_on_disk` (`i32`): Size of the photo on disk in KB
/// - `photo_date` (`NaiveDateTime`): When the photo was taken
/// - `photo_timezone` (`String`): Timezone of photo timestamp
/// - `resolution` (`Vec<Option<i16>>`): Width and height dimensions
/// - `mime_type` (`String`): MIME type (e.g., image/x-sony-arw)
/// - `camera_model` (`String`): Camera used
/// - `lens_model` (`String`): Lens used
/// - `shutter_count` (`i32`): Camera shutter actuation count
/// - `focal_length` (`i16`): Lens focal length
/// - `iso` (`i32`): ISO sensitivity 
/// - `shutter_speed` (`String`): Shutter speed as string
/// - `aperture` (`f32`): Lens aperture
#[derive(Insertable, Deserialize, Serialize, Debug)]
#[serde(rename_all = "camelCase")]
#[diesel(table_name = photos)]
pub struct NewPhoto {
    pub hash: String,
    pub thumbnail_path: String,
    pub file_name: String,
    pub file_path: String,
    pub size_on_disk: i32,
    pub photo_date: NaiveDateTime,
    pub photo_timezone: String,
    pub resolution: Vec<Option<i16>>,
    pub mime_type: String,
    pub camera_model: String,
    pub lens_model: String,
    pub shutter_count: i32,
    pub focal_length: i16,
    pub iso: i32,
    pub shutter_speed: String,
    pub aperture: f32,
}
